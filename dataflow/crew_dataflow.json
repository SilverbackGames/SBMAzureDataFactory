{
	"name": "crew_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiCrewRawCollection",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiCrewCollection",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Select"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "parameters{\n\tcrewId as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tquery: (concat(\"SELECT * FROM c WHERE c.Crew_Code = '\", $crewId, \"'\")),\n\tformat: 'documentQuery',\n\tsystemColumns: false,\n\tthroughput: 3500) ~> source1\nsource1 select(mapColumn(\n\t\tid = Crew_Code,\n\t\tsurname = Crew_Surname,\n\t\tname = Crew_Name,\n\t\trank = Crew_Rank,\n\t\tSBMer = Crew_Type,\n\t\tvesselName = Vessel_Name,\n\t\tpool = Crew_Pool\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nSelect derive(SBMer = !equalsIgnoreCase(byName('SBMer'), \"VENDOR\") ||  isNull(byName('SBMer')),\n\t\tregion = iif(contains(['FPSO Cidade de Saquarema', 'FPSO Cidade de MaricÃ¡', 'FPSO Cidade de Ilhabela', 'FPSO Cidade de Paraty', 'FPSO CIdade de Anchieta', 'FPSO EspÃ­rito Santo', 'FPSO Capixaba'], #item == byName('vesselName')), \"1\", \"2\"),\n\t\tid = toString(byName('id'))) ~> DerivedColumn1\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tname as string,\n\t\tsurname as string,\n\t\tpool as string,\n\t\trank as string,\n\t\toffshore as boolean,\n\t\tSBMer as boolean,\n\t\tvesselName as string,\n\t\tregion as string,\n\t\tdepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'document',\n\tpartitionKey: ['/id'],\n\tthroughput: 3500,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}