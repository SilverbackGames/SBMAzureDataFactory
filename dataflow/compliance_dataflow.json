{
	"name": "compliance_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiComplianceRawCollection",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiComplianceCollection",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "FilterActualPlanned"
				},
				{
					"name": "FilterMandatoryRequirement"
				},
				{
					"name": "FlattenRequirement"
				},
				{
					"name": "FlattenMatrixs"
				},
				{
					"name": "FilterMatrixName"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "FlattenDocuments"
				},
				{
					"name": "FilterDocumentType"
				}
			],
			"script": "source(output(\n\t\tActualPlanned as string,\n\t\tCanculatedDate as string,\n\t\tPercentage as string,\n\t\tRank as string,\n\t\tRequirement as (Matrics as (Documents as (DocumentExpiryDate as string, DocumentIssueDate as string, DocumentNumber as string, DocumentRemarks as string, DocumentStatus as string, DocumentType as string, DocumentValidityMonth as string)[], MatrixName as string, MatrixRemarks as string, MatrixStatus as string, MatrixType as string)[], RequirementType as string)[],\n\t\tVessel as string,\n\t\tVesselFlag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tthroughput: 1000) ~> source1\nsource1 filter(equalsIgnoreCase(byName('ActualPlanned'), 'Planned')) ~> FilterActualPlanned\nFlattenRequirement filter(equalsIgnoreCase(byName('RequirementType'), 'Mandatory Requirements')) ~> FilterMandatoryRequirement\nFilterActualPlanned foldDown(unroll(Requirement, Requirement),\n\tmapColumn(\n\t\tRequirementType = Requirement.RequirementType,\n\t\tMatrics = Requirement.Matrics,\n\t\tPercentage,\n\t\tRank,\n\t\tCanculatedDate,\n\t\tcrewId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenRequirement\nFilterMandatoryRequirement foldDown(unroll(Matrics, Matrics),\n\tmapColumn(\n\t\tRequirementType,\n\t\tPercentage,\n\t\tRank,\n\t\tCalculatedDate = CanculatedDate,\n\t\tcrewId,\n\t\tMatrics\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenMatrixs\nFlattenMatrixs filter(equalsIgnoreCase(Matrics.MatrixName, 'SBM Operations Readiness CORE - Region 1')) ~> FilterMatrixName\nFilterDocumentType derive(crewId = toString(crewId)) ~> DerivedColumn1\nFilterMatrixName foldDown(unroll(Matrics.Documents, Matrics.Documents),\n\tmapColumn(\n\t\tRequirementType,\n\t\tPercentage,\n\t\tRank,\n\t\tCalculatedDate,\n\t\tcrewId,\n\t\tDocuments = Matrics.Documents,\n\t\tMatrixStatus = Matrics.MatrixStatus,\n\t\tMatrixRemarks = Matrics.MatrixRemarks,\n\t\tMatrixName = Matrics.MatrixName,\n\t\tMatrixType = Matrics.MatrixType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenDocuments\nFlattenDocuments filter(equalsIgnoreCase(trim(Documents.DocumentType), 'Environmental Awareness ISO 14001')) ~> FilterDocumentType\nDerivedColumn1 sink(input(\n\t\tDocumentExpiryDate as string,\n\t\tDocumentIssueDate as string,\n\t\tDocumentNumber as string,\n\t\tDocumentRemarks as string,\n\t\tDocumentStatus as string,\n\t\tDocumentType as string,\n\t\tDocumentValidityMonth as string,\n\t\tMatrixName as string,\n\t\tMatrixRemarks as string,\n\t\tMatrixStatus as string,\n\t\tMatrixType as string,\n\t\tuserId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'document',\n\tpartitionKey: ['/id'],\n\tthroughput: 400,\n\tmapColumn(\n\t\tPercentage,\n\t\tRank,\n\t\tcrewId,\n\t\tMatricsStatus = MatrixStatus,\n\t\tMatrixType,\n\t\tMatrixRemarks,\n\t\tMatrixName,\n\t\tDocuments,\n\t\tCalculatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}