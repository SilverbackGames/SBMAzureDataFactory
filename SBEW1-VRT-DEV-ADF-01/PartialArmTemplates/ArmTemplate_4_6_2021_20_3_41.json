{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "SBEW1-VRT-DEV-ADF-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/oscar_data_sync_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "List all crew code",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "RestSink",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": 10,
								"requestMethod": "POST",
								"writeBatchSize": 10000,
								"httpCompressionType": "none",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TEST_AllCrewRestResource",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "AllCrewJson",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Crew Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "All crew look up",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('All crew look up').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 8,
							"activities": [
								{
									"name": "Get crew detail",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "CosmosDbSqlApiSink",
											"writeBehavior": "upsert",
											"disableMetricsCollection": true
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CrewDetailRestResource",
											"type": "DatasetReference",
											"parameters": {
												"crewid": {
													"value": "@item().Code",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CosmosDbSqlApiCrewRawCollection",
											"type": "DatasetReference"
										}
									]
								},
								{
									"name": "Get crew compliance",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "crewId",
													"value": {
														"value": "@item().Code",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "CosmosDbSqlApiSink",
											"writeBehavior": "upsert",
											"disableMetricsCollection": true
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CrewComplianceRestResource",
											"type": "DatasetReference",
											"parameters": {
												"crew_code": "@item().Code"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CosmosDbSqlApiComplianceRawCollection",
											"type": "DatasetReference"
										}
									]
								},
								{
									"name": "Crew Data Flow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Get crew detail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "crew_dataflow",
											"type": "DataFlowReference",
											"parameters": {
												"crewId": {
													"value": "'@{item().Code}'",
													"type": "Expression"
												}
											}
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine",
										"runConcurrently": false
									}
								},
								{
									"name": "Compliance Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Get crew compliance",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "compliance_dataflow",
											"type": "DataFlowReference",
											"parameters": {
												"crewId": {
													"value": "'@{item().Code}'",
													"type": "Expression"
												}
											}
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine",
										"runConcurrently": false
									}
								}
							]
						}
					},
					{
						"name": "All crew look up",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "List all crew code",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AllCrewJson",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-03-24T12:22:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/crew_dataflow')]",
				"[concat(variables('factoryId'), '/dataflows/compliance_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/compliance_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiComplianceRawCollection",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiComplianceCollection",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterActualPlanned"
						},
						{
							"name": "FilterMandatoryRequirement"
						},
						{
							"name": "FlattenRequirement"
						},
						{
							"name": "FlattenMatrixs"
						},
						{
							"name": "FilterMatrixName"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "FlattenDocuments"
						},
						{
							"name": "FilterDocumentType"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcrewId as string (\"1388\")\n}\nsource(output(\n\t\tActualPlanned as string,\n\t\tCanculatedDate as string,\n\t\tPercentage as integer,\n\t\tRank as string,\n\t\tRequirement as (RequirementType as string, Matrics as (MatrixStatus as string, MatrixType as string, MatrixRemarks as string, MatrixName as string, Documents as (DocumentStatus as string, DocumentExpiryDate as string, DocumentType as string, DocumentNumber as string, DocumentValidityMonth as integer, DocumentIssueDate as string, DocumentRemarks as string)[])[])[],\n\t\tVessel as string,\n\t\tVesselFlag as string,\n\t\t{_attachments} as string,\n\t\t{_etag} as string,\n\t\t{_rid} as string,\n\t\t{_self} as string,\n\t\t{_ts} as integer,\n\t\tcrewId as short,\n\t\tid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tquery: (concat('SELECT * FROM c WHERE c.crewId = \\'', $crewId, '\\'')),\n\tformat: 'documentQuery',\n\tsystemColumns: false,\n\tthroughput: 3500) ~> source1\nsource1 filter(equalsIgnoreCase(byName('ActualPlanned'), 'Planned')) ~> FilterActualPlanned\nFlattenRequirement filter(equalsIgnoreCase(byName('RequirementType'), 'Mandatory Requirements')) ~> FilterMandatoryRequirement\nMapDrifted1 foldDown(unroll(Requirement, Requirement),\n\tmapColumn(\n\t\tRequirementType = Requirement.RequirementType,\n\t\tMatrics = Requirement.Matrics,\n\t\tPercentage,\n\t\tRank,\n\t\tCanculatedDate,\n\t\tcrewId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenRequirement\nFilterMandatoryRequirement foldDown(unroll(Matrics, Matrics),\n\tmapColumn(\n\t\tRequirementType,\n\t\tPercentage,\n\t\tRank,\n\t\tCalculatedDate = CanculatedDate,\n\t\tcrewId,\n\t\tMatrics\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenMatrixs\nFlattenMatrixs filter(equalsIgnoreCase(Matrics.MatrixName, 'SBM Operations Readiness CORE - Region 1')) ~> FilterMatrixName\nFilterDocumentType derive(crewId = toString(crewId),\n\t\tid = concat(byName('crewId'), '|', trim(byName('MatrixName')))) ~> DerivedColumn1\nFilterMatrixName foldDown(unroll(Matrics.Documents, Matrics.Documents),\n\tmapColumn(\n\t\tRequirementType,\n\t\tPercentage,\n\t\tRank,\n\t\tCalculatedDate,\n\t\tcrewId,\n\t\tDocuments = Matrics.Documents,\n\t\tMatrixStatus = Matrics.MatrixStatus,\n\t\tMatrixRemarks = Matrics.MatrixRemarks,\n\t\tMatrixName = Matrics.MatrixName,\n\t\tMatrixType = Matrics.MatrixType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenDocuments\nFlattenDocuments filter(equalsIgnoreCase(trim(Documents.DocumentType), 'Environmental Awareness ISO 14001')) ~> FilterDocumentType\nFilterActualPlanned derive(crewId = toString(byName('crewId'))) ~> MapDrifted1\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tDocumentExpiryDate as string,\n\t\tDocumentIssueDate as string,\n\t\tDocumentNumber as string,\n\t\tDocumentRemarks as string,\n\t\tDocumentStatus as string,\n\t\tDocumentType as string,\n\t\tDocumentValidityMonth as string,\n\t\tMatrixName as string,\n\t\tMatrixRemarks as string,\n\t\tMatrixStatus as string,\n\t\tMatrixType as string,\n\t\tuserId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'document',\n\tpartitionKey: ['/id'],\n\tthroughput: 3500,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/crew_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiCrewRawCollection",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiCrewCollection",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcrewId as string (\"4271\")\n}\nsource(output(\n\t\tSBMer as string,\n\t\tid as integer,\n\t\tname as string,\n\t\tpool as string,\n\t\trank as string,\n\t\tsurname as string,\n\t\tvesselName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tquery: (concat('SELECT c.Crew_Code AS id, c.Crew_Surname AS surname, c.Crew_Name as name, c.Crew_Rank as rank, c.Crew_Type AS SBMer, c.Vessel_Name AS vesselName, c.Crew_Pool as pool FROM c WHERE c.Crew_Code = ', $crewId)),\n\tformat: 'documentQuery',\n\tsystemColumns: false,\n\tthroughput: 3500) ~> source1\nsource1 derive(SBMer = !equalsIgnoreCase(byName('SBMer'), \"VENDOR\") ||  isNull(byName('SBMer')),\n\t\tregion = iif(contains(['FPSO Cidade de Saquarema', 'FPSO Cidade de Maricá', 'FPSO Cidade de Ilhabela', 'FPSO Cidade de Paraty', 'FPSO CIdade de Anchieta', 'FPSO Espírito Santo', 'FPSO Capixaba'], #item == byName('vesselName')), \"1\", \"2\"),\n\t\tid = toString(byName('id'))) ~> DerivedColumn1\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tname as string,\n\t\tsurname as string,\n\t\tpool as string,\n\t\trank as string,\n\t\toffshore as boolean,\n\t\tSBMer as boolean,\n\t\tvesselName as string,\n\t\tregion as string,\n\t\tdepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'document',\n\tpartitionKey: ['/id'],\n\tthroughput: 3500,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		}
	]
}