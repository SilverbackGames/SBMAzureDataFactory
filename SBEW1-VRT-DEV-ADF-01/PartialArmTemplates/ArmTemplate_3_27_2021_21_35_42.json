{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "SBEW1-VRT-DEV-ADF-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/oscar_data_sync_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "List all crew code",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "RestSink",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": 10,
								"requestMethod": "POST",
								"writeBatchSize": 10000,
								"httpCompressionType": "none",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TEST_AllCrewRestResource",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "AllCrewJson",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Crew Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "All crew look up",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('All crew look up').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get crew detail",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{concat('https://sbmstaging.compas.cloud/CompasAPI/v2/CompasRestService.svc/crew/details/', item())}"
										},
										{
											"name": "Destination",
											"value": "crew"
										}
									],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "CosmosDbSqlApiSink",
											"writeBehavior": "upsert",
											"disableMetricsCollection": true
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CrewDetailRestResource",
											"type": "DatasetReference",
											"parameters": {
												"crewid": {
													"value": "@item().Code",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CosmosDbSqlApiCrewRawCollection",
											"type": "DatasetReference"
										}
									]
								},
								{
									"name": "Get crew compliance",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "crewId",
													"value": {
														"value": "@item().Code",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "CosmosDbSqlApiSink",
											"writeBehavior": "upsert",
											"disableMetricsCollection": true
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CrewComplianceRestResource",
											"type": "DatasetReference",
											"parameters": {
												"crew_code": "@item().Code"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CosmosDbSqlApiComplianceRawCollection",
											"type": "DatasetReference"
										}
									]
								},
								{
									"name": "Crew Data Flow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Get crew detail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "crew_dataflow",
											"type": "DataFlowReference"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Compliance Dataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Get crew compliance",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "compliance_dataflow",
											"type": "DataFlowReference"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "All crew look up",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "List all crew code",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AllCrewJson",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-03-24T12:22:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TEST_AllCrewRestResource')]",
				"[concat(variables('factoryId'), '/dataflows/crew_dataflow')]",
				"[concat(variables('factoryId'), '/dataflows/compliance_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OSCAR_DataSync_DailyScheduling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "oscar_data_sync_pipeline",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-03-24T00:00:00",
						"timeZone": "Atlantic Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/oscar_data_sync_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/compliance_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiComplianceRawCollection",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiComplianceCollection",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterActualPlanned"
						},
						{
							"name": "FilterMandatoryRequirement"
						},
						{
							"name": "FlattenRequirement"
						},
						{
							"name": "FlattenMatrixs"
						},
						{
							"name": "FilterMatrixName"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "FlattenDocuments"
						},
						{
							"name": "FilterDocumentType"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"script": "source(output(\n\t\tActualPlanned as string,\n\t\tCanculatedDate as string,\n\t\tPercentage as integer,\n\t\tRank as string,\n\t\tRequirement as (RequirementType as string, Matrics as (MatrixStatus as string, MatrixType as string, MatrixRemarks as string, MatrixName as string, Documents as (DocumentStatus as string, DocumentExpiryDate as string, DocumentType as string, DocumentNumber as string, DocumentValidityMonth as integer, DocumentIssueDate as string, DocumentRemarks as string)[])[])[],\n\t\tVessel as string,\n\t\tVesselFlag as string,\n\t\tcrewId as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 20,\n\tinferDriftedColumnTypes: true,\n\tformat: 'document',\n\tthroughput: 1000) ~> source1\nsource1 filter(equalsIgnoreCase(byName('ActualPlanned'), 'Planned')) ~> FilterActualPlanned\nFlattenRequirement filter(equalsIgnoreCase(byName('RequirementType'), 'Mandatory Requirements')) ~> FilterMandatoryRequirement\nMapDrifted1 foldDown(unroll(Requirement, Requirement),\n\tmapColumn(\n\t\tRequirementType = Requirement.RequirementType,\n\t\tMatrics = Requirement.Matrics,\n\t\tPercentage,\n\t\tRank,\n\t\tCanculatedDate,\n\t\tcrewId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenRequirement\nFilterMandatoryRequirement foldDown(unroll(Matrics, Matrics),\n\tmapColumn(\n\t\tRequirementType,\n\t\tPercentage,\n\t\tRank,\n\t\tCalculatedDate = CanculatedDate,\n\t\tcrewId,\n\t\tMatrics\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenMatrixs\nFlattenMatrixs filter(equalsIgnoreCase(Matrics.MatrixName, 'SBM Operations Readiness CORE - Region 1')) ~> FilterMatrixName\nFilterDocumentType derive(crewId = toString(crewId)) ~> DerivedColumn1\nFilterMatrixName foldDown(unroll(Matrics.Documents, Matrics.Documents),\n\tmapColumn(\n\t\tRequirementType,\n\t\tPercentage,\n\t\tRank,\n\t\tCalculatedDate,\n\t\tcrewId,\n\t\tDocuments = Matrics.Documents,\n\t\tMatrixStatus = Matrics.MatrixStatus,\n\t\tMatrixRemarks = Matrics.MatrixRemarks,\n\t\tMatrixName = Matrics.MatrixName,\n\t\tMatrixType = Matrics.MatrixType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenDocuments\nFlattenDocuments filter(equalsIgnoreCase(trim(Documents.DocumentType), 'Environmental Awareness ISO 14001')) ~> FilterDocumentType\nFilterActualPlanned derive(crewId = toString(byName('crewId'))) ~> MapDrifted1\nDerivedColumn1 sink(input(\n\t\tDocumentExpiryDate as string,\n\t\tDocumentIssueDate as string,\n\t\tDocumentNumber as string,\n\t\tDocumentRemarks as string,\n\t\tDocumentStatus as string,\n\t\tDocumentType as string,\n\t\tDocumentValidityMonth as string,\n\t\tMatrixName as string,\n\t\tMatrixRemarks as string,\n\t\tMatrixStatus as string,\n\t\tMatrixType as string,\n\t\tuserId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'document',\n\tpartitionKey: ['/id'],\n\tthroughput: 400,\n\tmapColumn(\n\t\tPercentage,\n\t\tRank,\n\t\tcrewId,\n\t\tMatricsStatus = MatrixStatus,\n\t\tMatrixType,\n\t\tMatrixRemarks,\n\t\tMatrixName,\n\t\tDocuments,\n\t\tCalculatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/crew_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiCrewRawCollection",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiCrewCollection",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tCrew_Code as string,\n\t\tCrew_Surname as string,\n\t\tCrew_Name as string,\n\t\tCrew_Fathers_Name as string,\n\t\tCrew_Mothers_Name as string,\n\t\tCrew_Nationality as string,\n\t\tCrew_Birth_Date as string,\n\t\tCrew_Born_Place as string,\n\t\tCrew_Rank as string,\n\t\tCrew_Rank_Certificate as string,\n\t\tPrior_Exp_Months as string,\n\t\tPrior_Exp_Voyages as string,\n\t\tLast_Sign_Off_Date as string,\n\t\tAvailable_From_Date as string,\n\t\tDecision_Code as string,\n\t\tActive_Flag as string,\n\t\tRemarks1 as string,\n\t\tRemarks2 as string,\n\t\tHealth_Status as string,\n\t\tStatus_Code as string,\n\t\tSource_Code as string,\n\t\tCrew_Name2 as string,\n\t\tCrew_Nationality2 as string,\n\t\tNext_Vessel as string,\n\t\tPromotion as string,\n\t\tSeniority as string,\n\t\tPromotion_Date as string,\n\t\tPromotion_Rank as string,\n\t\tDate_Last_Med as string,\n\t\tPrev_Exp_As as string,\n\t\tCrew_Type as string,\n\t\tCrew_Religion as string,\n\t\tManual_Update as string,\n\t\tPension_Flag as string,\n\t\tEst_Sign_On as string,\n\t\tSign_On_Remarks as string,\n\t\tSign_On_Remarks2 as string,\n\t\tSign_On_Remarks3 as string,\n\t\tPort_Authority as string,\n\t\tPort_Authority2 as string,\n\t\tRank_Seniority as string,\n\t\tApplication_Date as string,\n\t\tCrew_Ssn as string,\n\t\tCrew_Isn_Employment_No as string,\n\t\tCrew_Employment_Year as string,\n\t\tOffice_Vessel_Flag as string,\n\t\tOn_Vessel as string,\n\t\tEnglish_Test as string,\n\t\tExtended_Leave as string,\n\t\tLv_Id as string,\n\t\tOb_Stat as string,\n\t\tLc_Id as string,\n\t\tCrew_Pool as string,\n\t\tCrew_Race as string,\n\t\tPr_Status as string,\n\t\tCrew_Rank_Point as string,\n\t\tCrew_Blood_Type as string,\n\t\tCrew_Eye_Sight as string,\n\t\tCrew_Color_Blindness as string,\n\t\tCrew_Alergies as string,\n\t\tCrew_Height as string,\n\t\tCrew_Weight as string,\n\t\tCrew_Blood_Rh as string,\n\t\tCpf_Number as string,\n\t\tCpf_Flag as string,\n\t\tMartial_Status as string,\n\t\tWage_Type as string,\n\t\tCrew_Nationality_Date as string,\n\t\tCrew_Rank_Certificate_Date as string,\n\t\tCrews_Rank_Point_Date as string,\n\t\tCrew_ID as string,\n\t\tCrew_Socso as string,\n\t\tCrew_Hrdf as string,\n\t\tCrew_Srcno as string,\n\t\tCrew_Sss_No as string,\n\t\tCrew_Cis_Idno as string,\n\t\tCrew_Dis_Marks as string,\n\t\tCrew_Eyes as string,\n\t\tCrew_Hair as string,\n\t\tCrew_Principal as string,\n\t\tCrew_Group_Date as string,\n\t\tCrew_Comp_Date as string,\n\t\tCrew_Phealth_No as string,\n\t\tCrew_Tin as string,\n\t\tCrew_Nor_Idno as string,\n\t\tCrew_Shipnet as string,\n\t\tCrew_Middlename as string,\n\t\tCrew_Pagibig_No as string,\n\t\tCrew_password as string,\n\t\tCrew_Mother_Maiden_Name as string,\n\t\tCrew_Shoe_Size as string,\n\t\tCrew_Boiler_Suit_Size as string,\n\t\tCrew_Marriage_Date as string,\n\t\tCrew_Indos_No as string,\n\t\tCrew_Tax_Regime as string,\n\t\tCrew_Birth_Country as string,\n\t\tCrew_Mother_Surname as string,\n\t\tCrew_Mother_Middle_Name as string,\n\t\tCrew_Father_Surname as string,\n\t\tCrew_Father_Middle_Name as string,\n\t\tCrew_Medical_Insurance_Scheme as string,\n\t\tCrew_Sb_Country as string,\n\t\tCrew_Orig_Surname as string,\n\t\tCrew_Orig_Name as string,\n\t\tCrew_Orig_Middlename as string,\n\t\tCrew_Orig_Born_Place as string,\n\t\tDualog_Status as string,\n\t\tCrew_Medication as string,\n\t\tCrew_Nickname as string,\n\t\tCrew_Change_Password as string,\n\t\tLast_Edited_Date as string,\n\t\tCrew_Sex as string,\n\t\tEmployment_End_Date as string,\n\t\tPassport_Number as string,\n\t\tPassport_Issue_Place as string,\n\t\tPassport_Country as string,\n\t\tPassport_Details as string,\n\t\tPassport_Expiry_Date as string,\n\t\tPassport_Issued_Date as string,\n\t\tSeamanBook_Number as string,\n\t\tSeamanBook_Issued as string,\n\t\tSeamanBook_Expiry as string,\n\t\tSeamanBook_Place as string,\n\t\tCrew_Status_Code as string,\n\t\tManning_Office as string,\n\t\tVessel_Name as string,\n\t\tWage_Matrix as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tsystemColumns: false,\n\tthroughput: 1000) ~> source1\nsource1 select(mapColumn(\n\t\tid = Crew_Code,\n\t\tsurname = Crew_Surname,\n\t\tname = Crew_Name,\n\t\trank = Crew_Rank,\n\t\tSBMer = Crew_Type,\n\t\tvesselName = Vessel_Name,\n\t\tpool = Crew_Pool\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nSelect derive(SBMer = !equalsIgnoreCase(byName('SBMer'), \"VENDOR\"),\n\t\tregion = iif(contains(['FPSO Cidade de Saquarema', 'FPSO Cidade de Maricá', 'FPSO Cidade de Ilhabela', 'FPSO Cidade de Paraty', 'FPSO CIdade de Anchieta', 'FPSO Espírito Santo', 'FPSO Capixaba'], #item == byName('vesselName')), 1, 2)) ~> DerivedColumn1\nDerivedColumn1 alterRow(updateIf(true())) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tname as string,\n\t\tsurname as string,\n\t\tpool as string,\n\t\trank as string,\n\t\toffshore as boolean,\n\t\tSBMer as boolean,\n\t\tvesselName as string,\n\t\tregion as string,\n\t\tdepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tformat: 'document',\n\tpartitionKey: ['/id'],\n\tthroughput: 400,\n\tmapColumn(\n\t\tid,\n\t\tsurname,\n\t\tname,\n\t\trank,\n\t\tSBMer,\n\t\tvesselName,\n\t\tpool,\n\t\tregion\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST_AllCrewRestResource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFunctionTestRestService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "https://sbew1-vrt-weur-dev-cddb65-apim.azure-api.net/api/crews"
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}